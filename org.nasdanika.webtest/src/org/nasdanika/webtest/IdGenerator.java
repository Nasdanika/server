package org.nasdanika.webtest;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Generates reproducible ID's.
 * @author Pavel Vlasov
 *
 */
public class IdGenerator {

	private Map<String, AtomicLong> taken = new HashMap<>();
	
	/**
	 * Generates id using object to hash and suffix to construct
	 * ID hint. If hint ID is already taken or if toHash or suffix are null
	 * ID is generated by incrementing the counter and adding it to the hint if 
	 * the hint is not null.
	 * @param toHash
	 * @param suffix
	 * @return
	 */
	public String genId(Object toHash, String suffix) {
		StringBuilder hint = new StringBuilder();
		if (toHash!=null) {
			hint.append(Integer.toString(toHash.hashCode(), Character.MAX_RADIX));
		}
		if (suffix!=null) {
			if (hint.length()>0) {
				hint.append("_");				
			}
			hint.append(suffix);
		}
		String id = hint.toString();
		AtomicLong counter = taken.get(id);
		if (counter==null) {
			taken.put(id, new AtomicLong());
			return id;
		}
		return id+"_"+ Long.toString(counter.incrementAndGet(), Character.MAX_RADIX);
	}

}
