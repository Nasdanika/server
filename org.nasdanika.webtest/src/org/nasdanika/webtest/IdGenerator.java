package org.nasdanika.webtest;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;

/**
 * Generates reproducible ID's.
 * @author Pavel Vlasov
 *
 */
public class IdGenerator {

	private AtomicLong counter = new AtomicLong();
	private Set<String> taken = new HashSet<>();
	
	/**
	 * Generates id useing object to hash and suffix to construct
	 * ID hint. If hint ID is already taken or if toHash or suffix are null
	 * ID is generated by incrementing the counter and adding it to the hint if 
	 * the hint is not null.
	 * @param toHash
	 * @param suffix
	 * @return
	 */
	public String genId(Object toHash, String suffix) {
		StringBuilder hint = new StringBuilder();
		if (toHash!=null) {
			hint.append(Integer.toString(toHash.hashCode(), Character.MAX_RADIX));
		}
		if (suffix!=null) {
			if (hint.length()>0) {
				hint.append("_");				
			}
			hint.append(suffix);
		}
		String id = hint.toString();
		while (id.isEmpty() || !taken.add(id)) {
			if (hint.length()==0) {
				id = Long.toString(counter.incrementAndGet(), Character.MAX_RADIX);
			} else {
				id = hint+"_"+Long.toString(counter.incrementAndGet(), Character.MAX_RADIX);
			}
		}
		return id;
	}

}
