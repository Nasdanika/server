<%@ jet package="org.nasdanika.cdo.web.routes" class="CDOObjectModuleEagerObjectFacadeDefinitionGenerator" skeleton="Generator.skeleton"%>
<%
	org.nasdanika.web.WebContext context = (org.nasdanika.web.WebContext) args[0];
	org.eclipse.emf.cdo.CDOObject cdoObject = (org.eclipse.emf.cdo.CDOObject) args[1]; 
	org.eclipse.emf.ecore.EReference ref = (org.eclipse.emf.ecore.EReference) args[2]; 
%>
// Eager object load strategy - returns an array of functions returning objects
get <%=ref.getName()%>() {
	var dataEntry = data.<%=ref.getName()%>;
	if (!dataEntry.hasOwnProperty('value')) {
		<% if (ref.isMany()) { %>
			dataEntry.value = [];
			for (var ref in dataEntry.initialValue) {
				var f = function(modName) {
					if (require.defined(modName)) {
						return require(modName);
					}
					
					console.log("Eager dependency is not yet defined, probably a circular reference: "+modName);
					return Q.Promise(function(resolve,reject,notify) {
						require([modName], function(mod) {
							resolve(mod);
						});					
					});				
				}.bind(this, dataEntry.initialValue[ref]+'.js');
				f.$path = dataEntry.initialValue[ref];
				dataEntry.value.push(f);				
			}
		<% } else { %>
			var modName = dataEntry.initialValue+'.js';
			if (require.defined(modName)) {
				dataEntry.value = require(modName);
			} else {
				console.log("Eager dependency is not yet defined, probably a circular reference: "+modName);
				dataEntry.value = Q.Promise(function(resolve, reject, notify) {
					require([modName], function(mod) {
						deferred.resolve(mod);
						dataEntry.value = mod; 
					});								
				});
				dataEntry.value.$path = dataEntry.initialValue;
			}		
		<% } %>
	}
	return dataEntry.value;
}<% if (ref.isChangeable() && context.authorize(cdoObject, "write", ref.getName(), null)) { %>,
set <%=ref.getName()%>(newValue) {
	data.<%=ref.getName()%>.value = newValue;
}<% } %>
