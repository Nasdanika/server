<%@ jet package="org.nasdanika.cdo.web.routes" class="CDOObjectModuleEagerObjectFacadeDefinitionGenerator" skeleton="Generator.skeleton"%>
<%
	org.nasdanika.web.WebContext context = (org.nasdanika.web.WebContext) args[0];
	org.eclipse.emf.cdo.CDOObject cdoObject = (org.eclipse.emf.cdo.CDOObject) args[1]; 
	org.eclipse.emf.ecore.EReference ref = (org.eclipse.emf.ecore.EReference) args[2]; 
%>
// Eager object load strategy - returns an array of objects
get <%=ref.getName()%>() {
	var dataEntry = data.<%=ref.getName()%>;
	if (!dataEntry.hasOwnProperty('value')) {
		dataEntry.value = [];
		for (ref in dataEntry.initialValue) {
			var modName = dataEntry.initialValue[ref];
			if (require.defined(modName)) {
				dataEntry.value.push(require(modName));
			} else {
				console.log("Eager dependency is not yet defined, probably a circular reference: "+modName);
				var deferred = q.defer();
				dataEntry.value.push(deferred.promise);
				var idx = ref;
				require(modName, function(mod) {
					deferred.resolve(mod);
					dataEntry.value[idx] = mod; 
				});				
			}
		}
	}
	return dataEntry.value;
}<% if (ref.isChangeable() && context.authorize(cdoObject, "write", ref.getName(), null)) { %>,
set <%=ref.getName()%>(newValue) {
	data.<%=ref.getName()%>.value = newValue;
}<% } %>
