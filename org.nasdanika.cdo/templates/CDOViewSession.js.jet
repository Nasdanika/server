<%@ jet package="org.nasdanika.cdo.web.routes" class="CDOViewSessionModuleGenerator" skeleton="Generator.skeleton" %>
<%
	org.nasdanika.web.WebContext context = (org.nasdanika.web.WebContext) args[0];
	org.eclipse.emf.cdo.view.CDOView cdoView = (org.eclipse.emf.cdo.view.CDOView) args[1]; 
%>
define(["q", "jquery"], function(Q, jquery) {

	<%@ include file="arrayDelta.js" %> 

	// prepares object for sending to the server side by replacing model objects with paths
	function marshal(obj) {
		if (Array.isArray(obj)) {
			var ret = [];
			for (i in obj) {
				ret.push(marshal(obj[i]));
			}	
			return ret;		
		} 
		
		if (typeof obj === "object") {
			if (obj.hasOwnProperty("$path")) {
				return { $path : obj.$path };
			}
			var ret = {};
			for (k in obj) {
				ret[k] = marshal(obj[k]);
			}	
			return ret;		
		}	
		
		return { value : obj };			
	}
	
	// unmarshals by resolving paths to promises
	function unmarshal(obj, isValue) {
		if (obj === undefined) {
			return obj;
		}
		
		if (Array.isArray(obj)) {
			var ret = [];
			var hasPromises = false;
			for (i in obj) {
				var e = unmarshal(obj[i], false);
				if (Q.isPromise(e)) {
					hasPromises = true;
				}
				ret.push(e);
			}	
			return hasPromises ? Q.all(ret) : ret;		
		} 
		
		if (isValue) {
			if (typeof obj === "object") {
				var pending = [];
				var ret = {};
				for (k in obj) {
					var e = unmarshal(obj[k], false);
					if (Q.isPromise(e)) {
						pending.push(e.then(function(k, v) { ret[k] = v; }.bind(this, k)));
					} else {
						ret[k] = e;
					}
				}	
				return pending.length==0 ? ret : Q.all(pending).thenResolve(ret);		
			}
						
			return obj;			
		}
				
		if (obj.hasOwnProperty("$path")) {
			return Q.promise(function(resolve, reject, notify) {
				require([obj.$path+".js"], function(mod) {
					resolve(mod);
				});																	        					
			});
		}
		
		return unmarshal(obj.value, true);	
	}

	var session = {
		sessionObjects : {},
		
		arrayDelta : function(original, modified) {
			return _arrayDelta(original, modified, 0, 0, 0);
		},
		
		// TODO - resources and resource folders - promise of resource content (lazy-ref)
	
		// Posts local changes to the server, including operation target, name, and arguments, if specified.
		// Applies returned server-side changes to the model
		// Returns a promise which is fulfilled with the operation result or undefined when store operation completes.
		apply : function(target, operation, opArgs) {
			return Q.Promise(function(resolve, reject, notify) {
				var applyData = {};
				if (target) {
					applyData.target = target;
					applyData.operation = operation;
					applyData.args = [];
					for (ak in opArgs) {
						applyData.args.push(marshal(opArgs[ak]));
					}
				}
				applyData.deltas = {};
				for (k in session.sessionObjects) {
					applyData.deltas[k] = session.sessionObjects[k].delta;
				}
				jquery.ajax(
					"<%=context.getObjectPath(cdoView)%>/session",
				    {
				    	type: "PUT",
				    	data: JSON.stringify(applyData),
				    	contentType: "text/json",
				        success: function(response) {
				        	if (response.hasOwnProperty('error')) {
				        		reject(response.error);
				        	} else { 
				        	 	if (response.hasOwnProperty('deltas')) {
				        	 		var deltaPromises = [];
					        		for (k in response.deltas) {
					        			if (session.sessionObjects.hasOwnProperty(k)) {
					        				var deltaPromise = session.sessionObjects[k].applyDelta(response.deltas[k]);
					        				if (Q.isPromise(deltaPromise)) {
					        					deltaPromises.push(deltaPromise);
					        				}
					        			}
					        		}
					        	}
					        	if (deltaPromises.length===0) {
					        		resolve(unmarshal(response.result, false));
					        	} else {
				        			Q.all(deltaPromises).then(function() { resolve(unmarshal(response.result, false)); });
				        		}
				        	}
				        },
				        error: function(jqXHR, textStatus, errorThrown) {
				        	reject(errorThrown);
				        }
				    });				
			})			
		}
	};	
	
	return session;
});