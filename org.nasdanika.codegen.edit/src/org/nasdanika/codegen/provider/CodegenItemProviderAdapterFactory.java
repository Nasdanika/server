/**
 */
package org.nasdanika.codegen.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.nasdanika.codegen.util.CodegenAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CodegenItemProviderAdapterFactory extends CodegenAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CodegenItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter() {
		if (groupItemProvider == null) {
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.Workspace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkspaceItemProvider workspaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.Workspace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkspaceAdapter() {
		if (workspaceItemProvider == null) {
			workspaceItemProvider = new WorkspaceItemProvider(this);
		}

		return workspaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.Folder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FolderItemProvider folderItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.Folder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFolderAdapter() {
		if (folderItemProvider == null) {
			folderItemProvider = new FolderItemProvider(this);
		}

		return folderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectItemProvider projectItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdapter() {
		if (projectItemProvider == null) {
			projectItemProvider = new ProjectItemProvider(this);
		}

		return projectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.BinaryFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryFileItemProvider binaryFileItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.BinaryFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryFileAdapter() {
		if (binaryFileItemProvider == null) {
			binaryFileItemProvider = new BinaryFileItemProvider(this);
		}

		return binaryFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.TextFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextFileItemProvider textFileItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.TextFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextFileAdapter() {
		if (textFileItemProvider == null) {
			textFileItemProvider = new TextFileItemProvider(this);
		}

		return textFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.ResourceReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceReferenceItemProvider resourceReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.ResourceReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceReferenceAdapter() {
		if (resourceReferenceItemProvider == null) {
			resourceReferenceItemProvider = new ResourceReferenceItemProvider(this);
		}

		return resourceReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.StaticText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StaticTextItemProvider staticTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.StaticText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStaticTextAdapter() {
		if (staticTextItemProvider == null) {
			staticTextItemProvider = new StaticTextItemProvider(this);
		}

		return staticTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.ContentReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContentReferenceItemProvider contentReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.ContentReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContentReferenceAdapter() {
		if (contentReferenceItemProvider == null) {
			contentReferenceItemProvider = new ContentReferenceItemProvider(this);
		}

		return contentReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.Interpolator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterpolatorItemProvider interpolatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.Interpolator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterpolatorAdapter() {
		if (interpolatorItemProvider == null) {
			interpolatorItemProvider = new InterpolatorItemProvider(this);
		}

		return interpolatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.JETEmitter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JETEmitterItemProvider jetEmitterItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.JETEmitter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJETEmitterAdapter() {
		if (jetEmitterItemProvider == null) {
			jetEmitterItemProvider = new JETEmitterItemProvider(this);
		}

		return jetEmitterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.JavaTextFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaTextFilterItemProvider javaTextFilterItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.JavaTextFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaTextFilterAdapter() {
		if (javaTextFilterItemProvider == null) {
			javaTextFilterItemProvider = new JavaTextFilterItemProvider(this);
		}

		return javaTextFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.JavaStreamFilter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaStreamFilterItemProvider javaStreamFilterItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.JavaStreamFilter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaStreamFilterAdapter() {
		if (javaStreamFilterItemProvider == null) {
			javaStreamFilterItemProvider = new JavaStreamFilterItemProvider(this);
		}

		return javaStreamFilterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.JavaTextGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaTextGeneratorItemProvider javaTextGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.JavaTextGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaTextGeneratorAdapter() {
		if (javaTextGeneratorItemProvider == null) {
			javaTextGeneratorItemProvider = new JavaTextGeneratorItemProvider(this);
		}

		return javaTextGeneratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.codegen.JavaStreamGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaStreamGeneratorItemProvider javaStreamGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.codegen.JavaStreamGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaStreamGeneratorAdapter() {
		if (javaStreamGeneratorItemProvider == null) {
			javaStreamGeneratorItemProvider = new JavaStreamGeneratorItemProvider(this);
		}

		return javaStreamGeneratorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (workspaceItemProvider != null) workspaceItemProvider.dispose();
		if (folderItemProvider != null) folderItemProvider.dispose();
		if (projectItemProvider != null) projectItemProvider.dispose();
		if (binaryFileItemProvider != null) binaryFileItemProvider.dispose();
		if (textFileItemProvider != null) textFileItemProvider.dispose();
		if (resourceReferenceItemProvider != null) resourceReferenceItemProvider.dispose();
		if (staticTextItemProvider != null) staticTextItemProvider.dispose();
		if (contentReferenceItemProvider != null) contentReferenceItemProvider.dispose();
		if (interpolatorItemProvider != null) interpolatorItemProvider.dispose();
		if (jetEmitterItemProvider != null) jetEmitterItemProvider.dispose();
		if (javaTextFilterItemProvider != null) javaTextFilterItemProvider.dispose();
		if (javaStreamFilterItemProvider != null) javaStreamFilterItemProvider.dispose();
		if (javaTextGeneratorItemProvider != null) javaTextGeneratorItemProvider.dispose();
		if (javaStreamGeneratorItemProvider != null) javaStreamGeneratorItemProvider.dispose();
	}

}
