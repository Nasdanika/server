<%@ jet package="org.nasdanika.cdo.web.html" class="KnockoutJsModelGenerator" skeleton="Generator.skeleton" %>
<%
	// { name, defaultValueLiteral, validator }
	java.util.List<String[]> dataMap = (java.util.List<String[]>) args[0];
%>
function(inputData, applyTarget) {
    
    this.observableData = {
    	<% for (int i=1; i<dataMap.size(); ++i) { %>
        	<%=dataMap.get(i)[0]%>: ko.observable()<% if (i<dataMap.size()-1) { %>,<% } %>
        <% } %>
    };
    
    this.observableValidationResults = {
    	<% for (int i=0; i<dataMap.size(); ++i) { %>
        	<%=dataMap.get(i)[0]%>: ko.observable()<% if (i<dataMap.size()-1) { %>,<% } %>
        <% } %>
    }
    
    this.clear = function() {
    	<% for (int i=0; i<dataMap.size(); ++i) { %>
			<% if (i>0) { %>this.observableData.<%=dataMap.get(i)[0]%>(<%= dataMap.get(i)[1]==null ? "undefined" : dataMap.get(i)[1] %>);<% } %>    	
        	this.observableValidationResults.<%=dataMap.get(i)[0]%>(undefined);
        <% } %>
    }
    
    this.clear();
    
    var data = {};
    
   	<% for (int i=1; i<dataMap.size(); ++i) { %>
    	Object.defineProperty(data, "<%=dataMap.get(i)[0]%>", { 
    		get: this.observableData.<%=dataMap.get(i)[0]%>,
    		set: this.observableData.<%=dataMap.get(i)[0]%>
	    });
    <% } %>                 
    
    var validationResults = {};
    
   	<% for (int i=0; i<dataMap.size(); ++i) { %>
    	Object.defineProperty(validationResults, "<%=dataMap.get(i)[0]%>", { 
    		get: this.observableValidationResults.<%=dataMap.get(i)[0]%>,
    		set: this.observableValidationResults.<%=dataMap.get(i)[0]%>
	    });
    <% } %>
    
    Object.defineProperty(this, "data", {
        get: function() { 
            return data; 
        },
        set: function(newData) {
            for (k in newData) {
                if (ko.isObservable(this.observableData[k])) {
                    this.observableData[k](newData[k]);
                } else {
                    this.observableData[k] = newData[k];
                }
            }
        }
    });
    
    Object.defineProperty(this, "validationResults", {
        get: function() { 
            return validationResults; 
        },
        set: function(newValidationResults) {
            for (k in this.observableValidationResults) {
            	if (newValidationResults.hasOwnProperty(k)) {
	                if (ko.isObservable(this.observableValidationResults[k])) {
	                    this.observableValidationResults[k](newValidationResults[k]);
	                } else {
	                    this.observableValidationResults[k] = newValidationResults[k];
	                }
            	} else {
	                if (ko.isObservable(this.observableValidationResults[k])) {
	                    this.observableValidationResults[k]("");
	                }            		
            	}  
            }
        }
    });
    
    <% if (args[1]!=null) { %>
    	this.loadModel = function(source) {
    		<%=args[1]%>
    	};
    <% } %>    
    
    this.validate = function() {    
		return Q.all([
		   	<% 
		   		boolean hasValidatorEntries = false;
		   		for (int i=0; i<dataMap.size(); ++i) {
		   			if (dataMap.get(i)[2]!=null) {
		   				if (hasValidatorEntries) { 
		   					stringBuffer.append(",");
		   				}		   				
		   				hasValidatorEntries = true;
		   	%>
		            Q.when(this.observableData.<%=dataMap.get(i)[0]%>()).then(function(value) {
		                <%=dataMap.get(i)[2]%> 
		            }.bind(this)).then(function(validationResult) {
		                this.observableValidationResults.<%=dataMap.get(i)[0]%>(validationResult); 
		                return !validationResult; 
		            }.bind(this))		   			   	
		   	<% 
		   			}
		   		} 
		   	%>
        ]).then(function(vResults) { 
            return vResults.reduce(function(r1, r2) { 
                return r1 && r2; 
            }, true); 
        });
    };
    
    this._apply = function() {
        <%=args[2]%>
    }
    
    this.apply = function() {
    	var ret = this._apply();
    	ret.then(function() { this.isDirty(false); }.bind(this));
    	return ret;
    }
    
    this.validateAndApply = function(applyTarget) {
	    return this.validate().then(function(isValid) {
	        if (isValid) {
                return this.apply().then(undefined, function(reason) {
                    if (reason.validationFailed) {
				        if (reason.validationResults && reason.validationResults.operation) {
                            this.validationResults = reason.validationResults.operation;
                        } 
				        throw reason;
				    }
				    throw { 
                        targetInvocationError: reason 
                    };
                }.bind(this));
            }
            throw { 
                validationFailed: true 
            };
        }.bind(this));        
    }
    
    if (inputData) {
    	this.data = inputData;
    }
    
    // Notifications
    this.isDirty = ko.observable(false);

	<% for (int i=1; i<dataMap.size(); ++i) { %>
		this.observableData.<%=dataMap.get(i)[0]%>.subscribe(function(newValue) {
			this.isDirty(true);
			if (typeof this.notify === 'function') {
				this.notify("<%=dataMap.get(i)[0]%>", newValue);
			}
		}.bind(this));
	<% } %>
    
    // Custom declarations
    <%=args[3]%>
    
}
