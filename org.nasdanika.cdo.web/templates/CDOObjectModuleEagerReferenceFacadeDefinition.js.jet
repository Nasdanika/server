<%@ jet package="org.nasdanika.cdo.web.routes" class="CDOObjectModuleEagerReferenceFacadeDefinitionGenerator" skeleton="Generator.skeleton"%>
<%
	org.nasdanika.web.HttpServletRequestContext context = (org.nasdanika.web.HttpServletRequestContext) args[0];
	org.eclipse.emf.cdo.CDOObject cdoObject = (org.eclipse.emf.cdo.CDOObject) args[1]; 
	org.eclipse.emf.ecore.EReference ref = (org.eclipse.emf.ecore.EReference) args[2]; 
%>
// Eager reference load strategy - returns an array of functions returning promises
get <%=ref.getName()%>() {
	var dataEntry = data.<%=ref.getName()%>;
	if (!dataEntry.hasOwnProperty('value')) {
		<% if (ref.isMany()) { %>
			dataEntry.value = [];
			for (var ref in dataEntry.initialValue) {
				var f = function(modName) {
					return Q.Promise(function(resolve, reject, notify) {
						require([modName], function(mod) {
							resolve(mod);
						});					
					});
				}.bind(this, dataEntry.initialValue[ref]+".js");
				f.$path = dataEntry.initialValue[ref];
				dataEntry.value.push(f);				
			}
		<% } else { %>
			dataEntry.value = Q.Promise(function(resolve, reject, nofity) {
				require([dataEntry.initialValue+".js"], function(mod) {
					resolve(mod);
					//dataEntry.value = mod; 
				});							
			});
			dataEntry.value.$path = dataEntry.initialValue;
		<% } %>
	}
	return dataEntry.value;
}<% if (ref.isChangeable() && context.authorize(cdoObject, "write", ref.getName(), null)) { %>,
set <%=ref.getName()%>(newValue) {
	data.<%=ref.getName()%>.value = newValue;
}<% } %>
